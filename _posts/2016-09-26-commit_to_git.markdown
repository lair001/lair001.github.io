---
layout: post
title:  "Commit to Git"
date:   2016-09-26 01:25:28 +0000
---


[`Git`](https://en.wikipedia.org/wiki/Git) is a [version control](https://en.wikipedia.org/wiki/Version_control) system.  Most, if not all, users of IT devices (desktops, laptops, tablets, smartphones, etc.) have used simple version control at some point.  For instance, when writing your resume, you may create different versions of said resume in files named my_resume1.docx, my_resume2.docx, and my_resume3.docx.  If you are working on a project spanning multiple files, you may create separate directories for multiple versions.  However, such simple systems are prone to user error.  You may accidently overwrite a file or place a file in the wrong directory.

Fortunately, Git resolves these issues by keeping track of snapshots of your project called commits.  Git keeps track of these commits in a `.git` subdirectory inside of your project's directory.  A directory containing a `.git` directory managed by Git is a Git repository.  If you are using [`GitHub`](https://en.wikipedia.org/wiki/GitHub), you can access a nice list of snapshots of your project.  An example of this feature can be found [here](https://github.com/lair001/super-prompt/commits/master).  I will write about GitHub in a future post.

Installing Git can [vary](https://git-scm.com/downloads) depending on your [operating system](https://en.wikipedia.org/wiki/Operating_system) (OS).  However, once installed, it is easy to get started with Git.  Simply navigate to the directory you wish to make into a Git [repository](https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository) and run `git init`.  This creates the `.git` subdirectory and a master branch (more on branches in a bit).  You may have trouble creating a master branch, however, if you start with a completely empty directory.  Such issues are easily avoided by having at least an empty file in the would-be Git repository.

You can then start making changes to your project such as adding or deleting files or directories or editing files.  When you want to stage, queue, or add changes for commit, you can run `git add [path]` to stage a particular file or directory using a path relative to your present working directory.  Alternatively, you can easily stage all changes by running `git add .`.  `git add` does not stage removals or deletions of files or directories by default.  If you want to stage deletions, you must use an option like `-A`.  For instance, `git add -A .` will stage all changes including deletions.  

Once you have staged your changes, you may finally commit by running `git ci -m "[message]"`.  Git emphasizes documenting changes so it will not process a commit without a message.  For the sanity of yourself and any coworkers, be sure that your messages are descriptive and accurate!

If you are making changes that you are afraid will break your project, you can create and switch or checkout to a new branch by running `git co -b [branch_name]`.  Upon running this command, you are now in a new branch of your project where you may experiment without worry.  You can switch or checkout existing branches with `git co`.  For example, `git co master` will take you back to your master branch.  Returning to your new branch with `git co [branch_name]`, you can make changes, stage changes with `git add .`, and commit changes with `git ci`.  Once you are satisfied with your new branch, you can checkout master and run `git merge [branch_name]` to merge your new branch with master.  Please note that merging will delete the new branch.  Alternatively, if you are unsatisfied with your new branch you may checkout master and delete your new branch with `git branch -d [branch_name]`.  Of course, if the branch represents a permanent fork in your project, you can simply keep it.  You can list all branches in your project and find out your current branch by running `git branch`.  

Initializing and working with a new repository is a bit niche.  It is far more common to clone an existing repository.  If you wish to clone a repository that is local to your machine, you may clone it with `git clone [path]`.  If you wish to clone a remote repository, you may do so with `git clone [user_name@host:path]`.

Cloning a repository automatically links your new repository with the source or origin.  Running `git remote -v` will list all remote repositories currently linked with the current one.  If you created the current repository by cloning another repository, the current repository will be automatically linked to the original under the alias of `origin`.  Please note that linked repositories will be listed as remote repositories even if they are, technically, local to your machine.  In this context, it is best to think of remote as remote from the current repository.  You may also link a repository to the current one by running `git remote add [remote_alias] [path` or `git remote add [remote_alias] [user_name@host:path]`.  In this way, you may link a repository you initialized from scratch to another repository or link a repository to multiple repositories.  In the latter case, you should, of course, give each linked repository a different alias.

What is the point of linking remote repositories?  You can pull changes from a remote by running `git pull` and, if you have permission, you can push changes to a remote by running `git push`.  The first time you pull to or push from a particular branch, you must intialize the push and pull commands with `-u [remote_alias] [branch_name]`.  For instance, `git push -u origin master` will push your `master` branch to a remote with alias `origin` and initialize `git pull` and `git push` commands on your `master` branch to the remote with alias `origin`.  Alternatively, you may use explicit `git push [remote_alias] [branch_name]` and `git pull [remote_alias] [branch_name]` commands for your pushes and pulls.

Pushing and pulling allows for teams or even informal groups to collaborate on projects.  If you attempt to push changes when a remote has changed since your last pull, you will be asked to pull.  When you do so, you will be able to find the changes labeled with comments by opening the affected files.  If necessary, you may make any necessary changes, stage, commit, and retry the push.  If not necessary, you can simply retry the push.  In this way, you may work on projects concurrently with others.

GitHub is, by far, the largest and most popular platform for collaborating on projects using Git.  It is used by both proprietary and open source software.  However, GitHub is a topic which deserves its own detailed blog post.  Expect it sometime in the next few months.
